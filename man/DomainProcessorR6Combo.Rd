% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DomainProcessorR6Combo.R
\name{DomainProcessorR6Combo}
\alias{DomainProcessorR6Combo}
\title{DomainProcessorR6Combo - Following Memory Template Exactly}
\description{
DomainProcessorR6Combo - Following Memory Template Exactly

DomainProcessorR6Combo - Following Memory Template Exactly
}
\details{
A working implementation that generates QMD files following the exact
structure of the memory template file.
}
\examples{

## ------------------------------------------------
## Method `DomainProcessorR6Combo$new`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$initialize(domains=..., pheno=..., input_file=..., output_dir=..., number=...)
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$load_data`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$load_data()
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$filter_by_domain`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$filter_by_domain()
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$select_columns`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$select_columns()
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$save_data`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$save_data(filename=..., format=...)
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$has_multiple_raters`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$has_multiple_raters()
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$detect_emotion_type`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$detect_emotion_type()
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$generate_domain_qmd`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_domain_qmd(domain_name=..., output_file=...)
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$generate_standard_qmd`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_standard_qmd(domain_name=..., output_file=...)
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$generate_adhd_adult_qmd`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_adhd_adult_qmd(domain_name=..., output_file=...)
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$generate_adhd_child_qmd`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_adhd_child_qmd(domain_name=..., output_file=...)
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$generate_emotion_child_qmd`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_emotion_child_qmd(domain_name=..., output_file=...)
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$generate_emotion_adult_qmd`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_emotion_adult_qmd(domain_name=..., output_file=...)
}

## ------------------------------------------------
## Method `DomainProcessorR6Combo$process`
## ------------------------------------------------

\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$process(generate_domain_files=...)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{domains}}{Character vector of domain names to process.}

\item{\code{pheno}}{Target phenotype identifier string.}

\item{\code{input_file}}{Path to the input data file.}

\item{\code{output_dir}}{Directory where output files will be saved.}

\item{\code{number}}{Domain number for file naming.}

\item{\code{data}}{The loaded and processed data.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DomainProcessorR6Combo-new}{\code{DomainProcessorR6Combo$new()}}
\item \href{#method-DomainProcessorR6Combo-load_data}{\code{DomainProcessorR6Combo$load_data()}}
\item \href{#method-DomainProcessorR6Combo-filter_by_domain}{\code{DomainProcessorR6Combo$filter_by_domain()}}
\item \href{#method-DomainProcessorR6Combo-select_columns}{\code{DomainProcessorR6Combo$select_columns()}}
\item \href{#method-DomainProcessorR6Combo-save_data}{\code{DomainProcessorR6Combo$save_data()}}
\item \href{#method-DomainProcessorR6Combo-has_multiple_raters}{\code{DomainProcessorR6Combo$has_multiple_raters()}}
\item \href{#method-DomainProcessorR6Combo-detect_emotion_type}{\code{DomainProcessorR6Combo$detect_emotion_type()}}
\item \href{#method-DomainProcessorR6Combo-generate_domain_qmd}{\code{DomainProcessorR6Combo$generate_domain_qmd()}}
\item \href{#method-DomainProcessorR6Combo-generate_standard_qmd}{\code{DomainProcessorR6Combo$generate_standard_qmd()}}
\item \href{#method-DomainProcessorR6Combo-generate_adhd_adult_qmd}{\code{DomainProcessorR6Combo$generate_adhd_adult_qmd()}}
\item \href{#method-DomainProcessorR6Combo-generate_adhd_child_qmd}{\code{DomainProcessorR6Combo$generate_adhd_child_qmd()}}
\item \href{#method-DomainProcessorR6Combo-generate_emotion_child_qmd}{\code{DomainProcessorR6Combo$generate_emotion_child_qmd()}}
\item \href{#method-DomainProcessorR6Combo-generate_emotion_adult_qmd}{\code{DomainProcessorR6Combo$generate_emotion_adult_qmd()}}
\item \href{#method-DomainProcessorR6Combo-process}{\code{DomainProcessorR6Combo$process()}}
\item \href{#method-DomainProcessorR6Combo-clone}{\code{DomainProcessorR6Combo$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-new"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new DomainProcessorR6Combo object


Create a new instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$new(
  domains,
  pheno,
  input_file,
  output_dir = "data",
  number = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domains}}{Character scalar or vector of domain names.}

\item{\code{pheno}}{A data.frame or tibble.}

\item{\code{input_file}}{Path to a file.}

\item{\code{output_dir}}{Path to an output directory.}

\item{\code{number}}{Numeric index or identifier.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{DomainProcessorR6Combo} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$initialize(domains=..., pheno=..., input_file=..., output_dir=..., number=...)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-load_data"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-load_data}{}}}
\subsection{Method \code{load_data()}}{
Load data from the specified input file


Load and normalize input data into the processor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$load_data()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{self} for method chaining.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$load_data()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-filter_by_domain"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-filter_by_domain}{}}}
\subsection{Method \code{filter_by_domain()}}{
Filter data to include only the specified domains


Filter the internal data to a specific domain or set of domains.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$filter_by_domain()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{self} for method chaining.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$filter_by_domain()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-select_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-select_columns}{}}}
\subsection{Method \code{select_columns()}}{
Select relevant columns from the data


Select and rename columns needed for downstream processing.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$select_columns()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{self} for method chaining.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$select_columns()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-save_data"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-save_data}{}}}
\subsection{Method \code{save_data()}}{
Save the processed data to a file


Persist the current data to disk in the requested format.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$save_data(filename = NULL, format = "parquet")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filename}}{Path to a file.}

\item{\code{format}}{File format (e.g., 'csv', 'rds', 'qmd').}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the output file path on success.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$save_data(filename=..., format=...)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-has_multiple_raters"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-has_multiple_raters}{}}}
\subsection{Method \code{has_multiple_raters()}}{
Check if domain has multiple raters


Check whether multiple raters are present for a given measure or dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$has_multiple_raters()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{self} for method chaining.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$has_multiple_raters()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-detect_emotion_type"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-detect_emotion_type}{}}}
\subsection{Method \code{detect_emotion_type()}}{
Detect emotion type (child/adult)


Infer whether the dataset represents child or adult emotion measures.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$detect_emotion_type()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{self} for method chaining.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$detect_emotion_type()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-generate_domain_qmd"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-generate_domain_qmd}{}}}
\subsection{Method \code{generate_domain_qmd()}}{
Generate domain QMD file following the memory template exactly


Generate a Quarto (.qmd) file for the given domain.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$generate_domain_qmd(
  domain_name = NULL,
  output_file = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domain_name}}{Character scalar or vector of domain names.}

\item{\code{output_file}}{Path to a file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the path to the generated file.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_domain_qmd(domain_name=..., output_file=...)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-generate_standard_qmd"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-generate_standard_qmd}{}}}
\subsection{Method \code{generate_standard_qmd()}}{
Generate standard domain QMD following the memory template structure exactly


Generate a standard Quarto (.qmd) file for general domains.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$generate_standard_qmd(domain_name, output_file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domain_name}}{Character scalar or vector of domain names.}

\item{\code{output_file}}{Path to a file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the path to the generated file.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_standard_qmd(domain_name=..., output_file=...)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-generate_adhd_adult_qmd"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-generate_adhd_adult_qmd}{}}}
\subsection{Method \code{generate_adhd_adult_qmd()}}{
Generate ADHD adult QMD file


Generate a Quarto (.qmd) file tailored for adult ADHD measures.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$generate_adhd_adult_qmd(domain_name, output_file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domain_name}}{Character scalar or vector of domain names.}

\item{\code{output_file}}{Path to a file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the path to the generated file.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_adhd_adult_qmd(domain_name=..., output_file=...)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-generate_adhd_child_qmd"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-generate_adhd_child_qmd}{}}}
\subsection{Method \code{generate_adhd_child_qmd()}}{
Generate ADHD child QMD file


Generate a Quarto (.qmd) file tailored for child ADHD measures.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$generate_adhd_child_qmd(domain_name, output_file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domain_name}}{Character scalar or vector of domain names.}

\item{\code{output_file}}{Path to a file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the path to the generated file.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_adhd_child_qmd(domain_name=..., output_file=...)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-generate_emotion_child_qmd"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-generate_emotion_child_qmd}{}}}
\subsection{Method \code{generate_emotion_child_qmd()}}{
Generate emotion child QMD file


Generate a Quarto (.qmd) file tailored for child emotion/affect measures.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$generate_emotion_child_qmd(domain_name, output_file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domain_name}}{Character scalar or vector of domain names.}

\item{\code{output_file}}{Path to a file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the path to the generated file.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_emotion_child_qmd(domain_name=..., output_file=...)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-generate_emotion_adult_qmd"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-generate_emotion_adult_qmd}{}}}
\subsection{Method \code{generate_emotion_adult_qmd()}}{
Generate emotion adult QMD file


Generate a Quarto (.qmd) file tailored for adult emotion/affect measures.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$generate_emotion_adult_qmd(domain_name, output_file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domain_name}}{Character scalar or vector of domain names.}

\item{\code{output_file}}{Path to a file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the path to the generated file.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$generate_emotion_adult_qmd(domain_name=..., output_file=...)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-process"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-process}{}}}
\subsection{Method \code{process()}}{
Run the complete processing pipeline


Run the full processing pipeline and (optionally) generate domain files.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$process(generate_domain_files = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{generate_domain_files}}{Character scalar or vector of domain names.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{self} for method chaining.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
  obj <- DomainProcessorR6Combo$new()
  obj$process(generate_domain_files=...)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6Combo-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6Combo-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6Combo$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
