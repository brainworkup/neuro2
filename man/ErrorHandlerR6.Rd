% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ErrorHandlerR6_fixed.R
\docType{class}
\name{ErrorHandlerR6}
\alias{ErrorHandlerR6}
\title{Centralized Error Handling System}
\format{
An R6 class object
}
\description{
Centralized error handling and user feedback system.
Provides consistent error reporting with helpful suggestions.
}
\details{
ErrorHandlerR6 Class
}
\section{Methods}{

\describe{
\item{\code{$initialize}}{See method docs below.}
\item{\code{$safe_execute}}{See method docs below.}
\item{\code{$handle_error}}{See method docs below.}
\item{\code{$handle_warning}}{See method docs below.}
\item{\code{$get_error_suggestions}}{See method docs below.}
\item{\code{$display_error}}{See method docs below.}
\item{\code{$get_recent_errors}}{See method docs below.}
\item{\code{$clear_log}}{See method docs below.}
\item{\code{$check_file_exists}}{See method docs below.}
\item{\code{$check_required_columns}}{See method docs below.}
\item{\code{$check_package_available}}{See method docs below.}
}
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{config}}{Configuration object for error handling}

\item{\code{error_log}}{List containing logged errors}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ErrorHandlerR6-new}{\code{ErrorHandlerR6$new()}}
\item \href{#method-ErrorHandlerR6-safe_execute}{\code{ErrorHandlerR6$safe_execute()}}
\item \href{#method-ErrorHandlerR6-handle_error}{\code{ErrorHandlerR6$handle_error()}}
\item \href{#method-ErrorHandlerR6-handle_warning}{\code{ErrorHandlerR6$handle_warning()}}
\item \href{#method-ErrorHandlerR6-get_error_suggestions}{\code{ErrorHandlerR6$get_error_suggestions()}}
\item \href{#method-ErrorHandlerR6-display_error}{\code{ErrorHandlerR6$display_error()}}
\item \href{#method-ErrorHandlerR6-get_recent_errors}{\code{ErrorHandlerR6$get_recent_errors()}}
\item \href{#method-ErrorHandlerR6-clear_log}{\code{ErrorHandlerR6$clear_log()}}
\item \href{#method-ErrorHandlerR6-check_file_exists}{\code{ErrorHandlerR6$check_file_exists()}}
\item \href{#method-ErrorHandlerR6-check_required_columns}{\code{ErrorHandlerR6$check_required_columns()}}
\item \href{#method-ErrorHandlerR6-check_package_available}{\code{ErrorHandlerR6$check_package_available()}}
\item \href{#method-ErrorHandlerR6-clone}{\code{ErrorHandlerR6$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-new"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-new}{}}}
\subsection{Method \code{new()}}{
Constructor. Create a new ErrorHandlerR6 instance and initialize the error log.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$new(config = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{config}}{Optional configuration object with settings (e.g., verbosity).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new ErrorHandlerR6 object (invisible).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-safe_execute"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-safe_execute}{}}}
\subsection{Method \code{safe_execute()}}{
Execute an expression safely, catching and logging any errors or warnings.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$safe_execute(
  expr,
  context = "operation",
  fallback = NULL,
  silent = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expr}}{Expression or function to execute.}

\item{\code{context}}{Character label describing the operation (for logging).}

\item{\code{fallback}}{Value to return if an error occurs.}

\item{\code{silent}}{If TRUE, suppress user-facing messages.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Result of the expression on success; otherwise \code{fallback}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-handle_error"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-handle_error}{}}}
\subsection{Method \code{handle_error()}}{
Handle an error by constructing a structured entry, logging it, and optionally displaying it.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$handle_error(error, context = "operation", silent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{error}}{Condition object returned by an error handler.}

\item{\code{context}}{Character description of where the error occurred.}

\item{\code{silent}}{If TRUE, do not display the error to the console.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns a structured error info list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-handle_warning"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-handle_warning}{}}}
\subsection{Method \code{handle_warning()}}{
Handle a warning by logging it and optionally emitting a cli warning.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$handle_warning(warning, context = "operation", silent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{warning}}{Condition object representing the warning.}

\item{\code{context}}{Character description of where the warning occurred.}

\item{\code{silent}}{If TRUE, do not display the warning to the console.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns a structured warning info list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-get_error_suggestions"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-get_error_suggestions}{}}}
\subsection{Method \code{get_error_suggestions()}}{
Return human-readable suggestions for resolving a given error message in a context.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$get_error_suggestions(message, context)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message}}{The error message text.}

\item{\code{context}}{Character label indicating the operation context.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector of suggestions.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-display_error"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-display_error}{}}}
\subsection{Method \code{display_error()}}{
Pretty-print an error entry to the console using cli if available; otherwise fallback to base output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$display_error(error_info)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{error_info}}{Structured list created by \code{handle_error()} containing message, context, and suggestions.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns self.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-get_recent_errors"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-get_recent_errors}{}}}
\subsection{Method \code{get_recent_errors()}}{
Retrieve and optionally print the last \code{n} errors from the internal log.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$get_recent_errors(n = 5)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{Number of recent errors to retrieve (default 5).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the retrieved list of error entries.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-clear_log"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-clear_log}{}}}
\subsection{Method \code{clear_log()}}{
Clear the internal error log.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$clear_log()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns self.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-check_file_exists"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-check_file_exists}{}}}
\subsection{Method \code{check_file_exists()}}{
Verify that a file exists; if not, log an error and return FALSE.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$check_file_exists(file_path, context = "file_check")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the file to check.}

\item{\code{context}}{Character context label for logging (default 'file_check').}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical indicating file existence.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-check_required_columns"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-check_required_columns}{}}}
\subsection{Method \code{check_required_columns()}}{
Verify that a data frame contains all \code{required_cols}; log and return FALSE if any are missing.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$check_required_columns(
  data,
  required_cols,
  context = "data_check"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{Data frame to validate.}

\item{\code{required_cols}}{Character vector of required column names.}

\item{\code{context}}{Character context label for logging (default 'data_check').}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical; TRUE if all required columns are present.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-check_package_available"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-check_package_available}{}}}
\subsection{Method \code{check_package_available()}}{
Check whether an R package is installed and available; log an error and return FALSE if missing.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$check_package_available(package, context = "package_check")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{package}}{Character package name to check.}

\item{\code{context}}{Character context label for logging (default 'package_check').}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical; TRUE if package is available.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
