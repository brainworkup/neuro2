% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ErrorHandlerR6-doc.R, R/ErrorHandlerR6.R
\docType{class}
\name{ErrorHandlerR6}
\alias{ErrorHandlerR6}
\title{Error and validation helper for neuro2}
\format{
An R6 class generator object.

An R6 class object
}
\value{
Most methods return the handler invisibly for chaining; query methods return logicals,
data structures, or user-provided fallbacks as appropriate.
}
\description{
An R6 class that centralizes safe evaluation, error/warning handling,
lightweight validations, and simple diagnostics to help keep the pipeline robust.

Centralized error handling and user feedback system.
Provides consistent error reporting with helpful suggestions.
}
\details{
ErrorHandlerR6 Class

ErrorHandlerR6 Class
}
\section{Methods}{

\describe{
\item{\code{$initialize(config = NULL)}}{Create a new handler; optionally pass a configuration list.}
\item{\code{$safe_execute(expr, context = NULL, fallback = NULL, silent = FALSE)}}{Safely evaluate an expression;
capture errors/warnings and return \code{fallback} (if provided) on failure.}
\item{\code{$handle_error(error, context = NULL, silent = FALSE)}}{Normalize and record an error condition with context.}
\item{\code{$handle_warning(warning, context = NULL, silent = FALSE)}}{Normalize and record a warning condition with context.}
\item{\code{$get_error_suggestions(message = NULL, context = NULL)}}{Return suggestions or troubleshooting tips based on a message/context.}
\item{\code{$display_error(error_info)}}{Pretty-print a stored error record.}
\item{\code{$get_recent_errors(n = 5)}}{Return the \code{n} most recent recorded errors.}
\item{\code{$clear_log()}}{Clear stored errors and warnings.}
\item{\code{$check_file_exists(file_path, context = NULL)}}{Return \code{TRUE} if a file exists; otherwise record and/or throw.}
\item{\code{$check_required_columns(data, required_cols, context = NULL)}}{Validate that \code{data} contains all \code{required_cols}.}
\item{\code{$check_package_available(package, context = NULL)}}{Return \code{TRUE} if a package is installed; otherwise record and/or throw.}
}
}

\section{Parameters (for methods above)}{

\describe{
\item{\code{config}}{Optional list with handler configuration (verbosity, raise policy, etc.).}
\item{\code{expr}}{An expression or function to execute safely.}
\item{\code{context}}{Optional character vector or list giving call-site context (e.g., file, domain).}
\item{\code{fallback}}{Value to return if \code{expr} fails; defaults to \code{NULL}.}
\item{\code{silent}}{Logical; when \code{TRUE}, suppress console output.}
\item{\code{error}}{An \code{error} object or condition.}
\item{\code{warning}}{A \code{warning} object or condition.}
\item{\code{message}}{Character string used to derive suggestions.}
\item{\code{error_info}}{Structured list or object that represents a stored error.}
\item{\code{n}}{Number of recent errors to return.}
\item{\code{file_path}}{Path to a file to check.}
\item{\code{data}}{A data frame / tibble to validate.}
\item{\code{required_cols}}{Character vector of required column names.}
\item{\code{package}}{Package name to check for availability.}
}
}

\examples{
\dontrun{
eh <- ErrorHandlerR6$new()
safe <- eh$safe_execute(function() 1 + 1)
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{config}}{Configuration object for error handling}

\item{\code{error_log}}{List containing logged errors}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ErrorHandlerR6-new}{\code{ErrorHandlerR6$new()}}
\item \href{#method-ErrorHandlerR6-safe_execute}{\code{ErrorHandlerR6$safe_execute()}}
\item \href{#method-ErrorHandlerR6-handle_error}{\code{ErrorHandlerR6$handle_error()}}
\item \href{#method-ErrorHandlerR6-handle_warning}{\code{ErrorHandlerR6$handle_warning()}}
\item \href{#method-ErrorHandlerR6-get_error_suggestions}{\code{ErrorHandlerR6$get_error_suggestions()}}
\item \href{#method-ErrorHandlerR6-display_error}{\code{ErrorHandlerR6$display_error()}}
\item \href{#method-ErrorHandlerR6-get_recent_errors}{\code{ErrorHandlerR6$get_recent_errors()}}
\item \href{#method-ErrorHandlerR6-clear_log}{\code{ErrorHandlerR6$clear_log()}}
\item \href{#method-ErrorHandlerR6-check_file_exists}{\code{ErrorHandlerR6$check_file_exists()}}
\item \href{#method-ErrorHandlerR6-check_required_columns}{\code{ErrorHandlerR6$check_required_columns()}}
\item \href{#method-ErrorHandlerR6-check_package_available}{\code{ErrorHandlerR6$check_package_available()}}
\item \href{#method-ErrorHandlerR6-clone}{\code{ErrorHandlerR6$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-new"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$new(config = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-safe_execute"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-safe_execute}{}}}
\subsection{Method \code{safe_execute()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$safe_execute(
  expr,
  context = "operation",
  fallback = NULL,
  silent = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-handle_error"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-handle_error}{}}}
\subsection{Method \code{handle_error()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$handle_error(error, context = "operation", silent = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-handle_warning"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-handle_warning}{}}}
\subsection{Method \code{handle_warning()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$handle_warning(warning, context = "operation", silent = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-get_error_suggestions"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-get_error_suggestions}{}}}
\subsection{Method \code{get_error_suggestions()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$get_error_suggestions(message, context)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-display_error"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-display_error}{}}}
\subsection{Method \code{display_error()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$display_error(error_info)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-get_recent_errors"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-get_recent_errors}{}}}
\subsection{Method \code{get_recent_errors()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$get_recent_errors(n = 5)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-clear_log"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-clear_log}{}}}
\subsection{Method \code{clear_log()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$clear_log()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-check_file_exists"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-check_file_exists}{}}}
\subsection{Method \code{check_file_exists()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$check_file_exists(file_path, context = "file_check")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-check_required_columns"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-check_required_columns}{}}}
\subsection{Method \code{check_required_columns()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$check_required_columns(
  data,
  required_cols,
  context = "data_check"
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-check_package_available"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-check_package_available}{}}}
\subsection{Method \code{check_package_available()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$check_package_available(package, context = "package_check")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ErrorHandlerR6-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ErrorHandlerR6-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ErrorHandlerR6$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
