% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DuckDBProcessorR6.R
\docType{class}
\name{DuckDBProcessorR6}
\alias{DuckDBProcessorR6}
\title{DuckDBProcessorR6 Class}
\format{
An R6 class object
}
\description{
An R6 class that provides an efficient data processing pipeline for
neuropsychological data using the DuckDB database engine. It allows for
SQL-based querying and processing of large datasets without loading them
entirely into memory, which is ideal for performance and scalability.
}
\details{
The \code{DuckDBProcessorR6} class handles the connection to a DuckDB database
(either in-memory or file-based), registration of data files (CSV, Parquet,
Arrow/Feather) as virtual tables, and execution of SQL queries. It is
designed to integrate seamlessly with other R6-based components in this
package.
}
\section{Methods}{

\describe{
\item{\code{initialize(db_path = ":memory:", data_dir = "data", auto_register = TRUE)}}{
Initialize a new DuckDBProcessorR6 object.
}
\item{\code{connect()}}{
Create or reconnect to the DuckDB database.
}
\item{\code{disconnect()}}{
Close the database connection.
}
\item{\code{register_csv(file_path, table_name = NULL, options = NULL)}}{
Register a CSV file as a virtual table.
}
\item{\code{register_parquet(file_path, table_name = NULL)}}{
Register a Parquet file as a virtual table.
}
\item{\code{register_arrow(file_path, table_name = NULL)}}{
Register an Arrow/Feather file as a virtual table.
}
\item{\code{register_all_csvs(data_dir = "data", pattern = "*.csv")}}{
Register all CSV files in a directory.
}
\item{\code{register_all_files(data_dir = "data", formats = c("parquet", "arrow", "csv"))}}{
Register all data files in a directory.
}
\item{\code{export_to_parquet(table_name, output_path, compression = "zstd")}}{
Export data to Parquet format.
}
\item{\code{query(query, params = NULL)}}{
Execute a SQL query and return results.
}
\item{\code{execute(statement, params = NULL)}}{
Execute a SQL statement that doesn't return results.
}
\item{\code{query_lazy(table_name)}}{
Create a lazy reference to a table for dplyr operations.
}
\item{\code{process_domain(domain, data_type = "neurocog", scales = NULL)}}{
Process a specific domain using SQL.
}
\item{\code{calculate_z_stats(table_name, group_vars)}}{
Calculate z-score statistics.
}
\item{\code{export_to_r6(domain, processor_class = "DomainProcessor")}}{
Export query results to standard R6 processors.
}
\item{\code{get_domain_summary(include_all = TRUE)}}{
Get domain summary statistics using SQL.
}
\item{\code{create_indexes()}}{
Create optimized indexes for faster queries.
}
}
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{con}}{Database connection object}

\item{\code{db_path}}{Database file path}

\item{\code{tables}}{Registered tables}

\item{\code{data_paths}}{Data file paths}

\item{\code{available_extensions}}{Character vector of available DuckDB extensions}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DuckDBProcessorR6-new}{\code{DuckDBProcessorR6$new()}}
\item \href{#method-DuckDBProcessorR6-connect}{\code{DuckDBProcessorR6$connect()}}
\item \href{#method-DuckDBProcessorR6-disconnect}{\code{DuckDBProcessorR6$disconnect()}}
\item \href{#method-DuckDBProcessorR6-register_csv}{\code{DuckDBProcessorR6$register_csv()}}
\item \href{#method-DuckDBProcessorR6-register_parquet}{\code{DuckDBProcessorR6$register_parquet()}}
\item \href{#method-DuckDBProcessorR6-register_arrow}{\code{DuckDBProcessorR6$register_arrow()}}
\item \href{#method-DuckDBProcessorR6-register_all_csvs}{\code{DuckDBProcessorR6$register_all_csvs()}}
\item \href{#method-DuckDBProcessorR6-register_all_files}{\code{DuckDBProcessorR6$register_all_files()}}
\item \href{#method-DuckDBProcessorR6-export_to_parquet}{\code{DuckDBProcessorR6$export_to_parquet()}}
\item \href{#method-DuckDBProcessorR6-query}{\code{DuckDBProcessorR6$query()}}
\item \href{#method-DuckDBProcessorR6-execute}{\code{DuckDBProcessorR6$execute()}}
\item \href{#method-DuckDBProcessorR6-query_lazy}{\code{DuckDBProcessorR6$query_lazy()}}
\item \href{#method-DuckDBProcessorR6-process_domain}{\code{DuckDBProcessorR6$process_domain()}}
\item \href{#method-DuckDBProcessorR6-calculate_z_stats}{\code{DuckDBProcessorR6$calculate_z_stats()}}
\item \href{#method-DuckDBProcessorR6-export_to_r6}{\code{DuckDBProcessorR6$export_to_r6()}}
\item \href{#method-DuckDBProcessorR6-get_domain_summary}{\code{DuckDBProcessorR6$get_domain_summary()}}
\item \href{#method-DuckDBProcessorR6-create_indexes}{\code{DuckDBProcessorR6$create_indexes()}}
\item \href{#method-DuckDBProcessorR6-clone}{\code{DuckDBProcessorR6$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-new"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-new}{}}}
\subsection{Method \code{new()}}{
Constructor. Create a new DuckDBProcessorR6 instance and optionally auto-register data files.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$new(
  db_path = ":memory:",
  data_dir = "data",
  auto_register = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{db_path}}{Path to the DuckDB database file. Use ":memory:" for in-memory DB.}

\item{\code{data_dir}}{Directory containing data files to register.}

\item{\code{auto_register}}{If TRUE, attempt to auto-register supported data files from \code{data_dir}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new DuckDBProcessorR6 object (invisible).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-connect"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-connect}{}}}
\subsection{Method \code{connect()}}{
Open (or re-open) a DuckDB connection based on \code{db_path} and set up extensions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$connect()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{self} after establishing a connection.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-disconnect"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-disconnect}{}}}
\subsection{Method \code{disconnect()}}{
Close the open DuckDB connection if present.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$disconnect()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{self}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_csv"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_csv}{}}}
\subsection{Method \code{register_csv()}}{
Register a CSV file as a virtual table for SQL access.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_csv(file_path, table_name = NULL, options = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the CSV file.}

\item{\code{table_name}}{Optional table name. If NULL, derived from filename.}

\item{\code{options}}{Named list of DuckDB CSV reader options (e.g., header, delim).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The name of the registered table (character).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_parquet"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_parquet}{}}}
\subsection{Method \code{register_parquet()}}{
Register a Parquet file as a virtual table for SQL access.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_parquet(file_path, table_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the Parquet file.}

\item{\code{table_name}}{Optional table name. If NULL, derived from filename.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The name of the registered table (character).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_arrow"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_arrow}{}}}
\subsection{Method \code{register_arrow()}}{
Register an Arrow/Feather file as a virtual table for SQL access.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_arrow(file_path, table_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the Feather/Arrow file.}

\item{\code{table_name}}{Optional table name. If NULL, derived from filename.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The name of the registered table (character).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_all_csvs"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_all_csvs}{}}}
\subsection{Method \code{register_all_csvs()}}{
Register all CSV files in a directory that match \code{pattern}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_all_csvs(data_dir = "data", pattern = "*.csv")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_dir}}{Directory containing CSV files to register.}

\item{\code{pattern}}{Glob pattern for files (default: "*.csv").}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector of registered table names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_all_files"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_all_files}{}}}
\subsection{Method \code{register_all_files()}}{
Register all supported files (parquet/arrow/csv) in a directory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_all_files(
  data_dir = "data",
  formats = c("parquet", "arrow", "csv")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_dir}}{Directory containing files to register.}

\item{\code{formats}}{Character vector of formats to register (subset of c("parquet","arrow","csv")).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector of registered table names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-export_to_parquet"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-export_to_parquet}{}}}
\subsection{Method \code{export_to_parquet()}}{
Export a registered table to a Parquet file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$export_to_parquet(
  table_name,
  output_path,
  compression = "zstd"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Name of the registered table to export.}

\item{\code{output_path}}{Destination Parquet file path.}

\item{\code{compression}}{Compression codec to use (e.g., "zstd").}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the \code{output_path}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-query"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-query}{}}}
\subsection{Method \code{query()}}{
Execute a SQL query and return results as a data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$query(query, params = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{SQL query string. May reference registered tables.}

\item{\code{params}}{Optional named list of parameter values for parameterized queries.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data.frame with query results.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-execute"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-execute}{}}}
\subsection{Method \code{execute()}}{
Execute a SQL statement that does not return rows (e.g., CREATE INDEX).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$execute(statement, params = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statement}}{SQL statement string.}

\item{\code{params}}{Optional named list of parameter values.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns TRUE on success.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-query_lazy"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-query_lazy}{}}}
\subsection{Method \code{query_lazy()}}{
Return a lazy dplyr table reference to an existing DuckDB table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$query_lazy(table_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Name of a registered table.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A dplyr tbl_lazy object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-process_domain"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-process_domain}{}}}
\subsection{Method \code{process_domain()}}{
Process and return data for a given domain via SQL, optionally filtered by \code{data_type} and \code{scales}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$process_domain(domain, data_type = "neurocog", scales = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domain}}{Domain name (character).}

\item{\code{data_type}}{Type of data: "neurocog", "neurobehav", or "validity".}

\item{\code{scales}}{Optional character vector of scales to include; NULL includes defaults for the domain.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data.frame with processed domain data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-calculate_z_stats"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-calculate_z_stats}{}}}
\subsection{Method \code{calculate_z_stats()}}{
Compute z-score statistics grouped by variables for a given table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$calculate_z_stats(table_name, group_vars)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Name of the registered table to summarize.}

\item{\code{group_vars}}{Character vector of column names to group by.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data.frame containing z-score summaries by group.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-export_to_r6"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-export_to_r6}{}}}
\subsection{Method \code{export_to_r6()}}{
Export processed results into a standard R6 processor (e.g., DomainProcessor).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$export_to_r6(domain, processor_class = "DomainProcessor")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domain}}{Domain name to export.}

\item{\code{processor_class}}{R6 class name or generator to use (default: "DomainProcessor").}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An instance of the target R6 processor initialized with the domain data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-get_domain_summary"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-get_domain_summary}{}}}
\subsection{Method \code{get_domain_summary()}}{
Return summary statistics across domains via SQL.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$get_domain_summary(include_all = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_all}}{If TRUE, include all domains; otherwise, restrict to those with data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data.frame with domain-level summary metrics.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-create_indexes"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-create_indexes}{}}}
\subsection{Method \code{create_indexes()}}{
Create useful indexes on commonly-queried columns to speed up SQL operations.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$create_indexes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns TRUE on success.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
