% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DuckDBProcessorR6-doc.R, R/DuckDBProcessorR6.R
\docType{class}
\name{DuckDBProcessorR6}
\alias{DuckDBProcessorR6}
\title{DuckDB-backed data processor for neuro2}
\format{
An R6 class generator object.

An R6 class object
}
\value{
Unless otherwise stated, methods return the processor invisibly (for chaining) or
a data frame (for eager \code{$query()}) or a lazy table/tbl_dbi (\code{$query_lazy()}).
}
\description{
An R6 class that manages a DuckDB connection and provides helpers
to register CSV/Parquet/Arrow data sources, run queries (eager and lazy),
compute simple statistics, and export data. This block documents the class
that is defined elsewhere (do not edit that file). Place this file in \code{R/}
so roxygen2 can generate documentation without modifying the original source.

An R6 class that provides an efficient data processing pipeline for
neuropsychological data using the DuckDB database engine. It allows for
SQL-based querying and processing of large datasets without loading them
entirely into memory, which is ideal for performance and scalability.
}
\details{
DuckDBProcessorR6 Class

This documentation topic exists separately from the class definition to satisfy
roxygen2's R6 method/field documentation checks without modifying the original code file.
The processor wraps \pkg{duckdb} / \pkg{DBI} and often integrates with \pkg{dplyr}/\pkg{dbplyr}
for lazy querying. Registration helpers typically use \code{duckdb_register()} or virtual tables.

The \code{DuckDBProcessorR6} class handles the connection to a DuckDB database
(either in-memory or file-based), registration of data files (CSV, Parquet,
Arrow/Feather) as virtual tables, and execution of SQL queries. It is
designed to integrate seamlessly with other R6-based components in this
package.
}
\section{Public fields}{

\describe{
\item{\code{available_extensions}}{Character vector of DuckDB extensions detected
or enabled by the processor (e.g., "httpfs", "parquet", "json").}
}
}

\section{Methods}{

\describe{
\item{\code{$initialize(db_path = NULL, data_dir = ".", auto_register = TRUE)}}{Create a new processor.
If \code{db_path} is \code{NULL}, an in-memory/temporary DB is used. When
\code{auto_register} is \code{TRUE}, common datasets in \code{data_dir} may be registered.}
\item{\code{$connect()}}{Open (or reopen) the DuckDB connection.}
\item{\code{$disconnect()}}{Safely close the DuckDB connection.}
\item{\code{$register_csv(file_path, table_name, options = list())}}{Register a CSV file
as a DuckDB table (optionally pass read options, e.g., \code{delim}, \code{header}).}
\item{\code{$register_parquet(file_path, table_name)}}{Register a Parquet file or directory
as a DuckDB table (uses the parquet scanner).}
\item{\code{$register_arrow(file_path, table_name)}}{Register an Arrow/Feather file or dataset.}
\item{\code{$register_all_csvs(data_dir = ".", pattern = "\\\\.(csv|tsv)$")}}{Register all CSV/TSV files
in a directory that match \code{pattern}.}
\item{\code{$register_all_files(data_dir = ".", formats = c("csv","tsv","parquet","feather"))}}{Register all supported
data files in \code{data_dir}.}
\item{\code{$export_to_parquet(table_name, output_path, compression = "zstd")}}{Export a DuckDB table to a Parquet file.}
\item{\code{$query(query, params = NULL)}}{Run a SQL query and return a data frame result (eager).}
\item{\code{$execute(statement, params = NULL)}}{Execute a SQL statement (e.g., \code{CREATE}, \code{INSERT}); returns invisibly.}
\item{\code{$query_lazy(table_name)}}{Return a lazy table (e.g., \pkg{dbplyr}/\pkg{dplyr} compatible) for \code{table_name}.}
\item{\code{$process_domain(domain, data_type = c("neurocognitive","neurobehavioral"), scales = NULL)}}{Domain-specific
processing helper that prepares/filters/joins the relevant tables for downstream reporting.}
\item{\code{$calculate_z_stats(table_name, group_vars = NULL)}}{Compute basic z-score statistics by groups if provided.}
\item{\code{$export_to_r6(domain, processor_class)}}{Export a prepared domain dataset into another R6 processor instance.}
\item{\code{$get_domain_summary(include_all = FALSE)}}{Return a short summary list/data frame for the domains detected/processed.}
\item{\code{$create_indexes()}}{Create useful indexes on common join/filter columns to speed up queries.}
}


\describe{
\item{\code{initialize(db_path = ":memory:", data_dir = "data", auto_register = TRUE)}}{
Initialize a new DuckDBProcessorR6 object.
\itemize{
\item \code{db_path}: Path to the DuckDB database file (default: ":memory:")
\item \code{data_dir}: Directory containing data files (default: "data")
\item \code{auto_register}: Automatically register CSV files (default: TRUE)
}
}
\item{\code{connect()}}{
Create or reconnect to the DuckDB database.
}
\item{\code{disconnect()}}{
Close the database connection.
}
\item{\code{register_csv(file_path, table_name = NULL, options = NULL)}}{
Register a CSV file as a virtual table.
\itemize{
\item \code{file_path}: Path to the CSV file
\item \code{table_name}: Name for the table (default: based on filename)
\item \code{options}: Additional CSV reading options
}
}
\item{\code{register_parquet(file_path, table_name = NULL)}}{
Register a Parquet file as a virtual table.
\itemize{
\item \code{file_path}: Path to the Parquet file
\item \code{table_name}: Name for the table (default: based on filename)
}
}
\item{\code{register_arrow(file_path, table_name = NULL)}}{
Register an Arrow/Feather file as a virtual table.
\itemize{
\item \code{file_path}: Path to the Arrow/Feather file
\item \code{table_name}: Name for the table (default: based on filename)
}
}
\item{\code{register_all_csvs(data_dir = "data", pattern = "*.csv")}}{
Register all CSV files in a directory.
\itemize{
\item \code{data_dir}: Directory containing CSV files
\item \code{pattern}: File pattern to match (default: "*.csv")
}
}
\item{\code{register_all_files(data_dir = "data", formats = c("parquet", "arrow", "csv"))}}{
Register all data files in a directory.
\itemize{
\item \code{data_dir}: Directory containing data files
\item \code{formats}: Character vector of formats to register
}
}
\item{\code{export_to_parquet(table_name, output_path, compression = "zstd")}}{
Export data to Parquet format.
\itemize{
\item \code{table_name}: Name of the table to export
\item \code{output_path}: Path for the output Parquet file
\item \code{compression}: Compression algorithm (default: "zstd")
}
}
\item{\code{query(query, params = NULL)}}{
Execute a SQL query and return results.
\itemize{
\item \code{query}: SQL query string
\item \code{params}: Named list of parameters for parameterized queries
}
}
\item{\code{execute(statement, params = NULL)}}{
Execute a SQL statement that doesn't return results.
\itemize{
\item \code{statement}: SQL statement string
\item \code{params}: Named list of parameters for parameterized statements
}
}
\item{\code{query_lazy(table_name)}}{
Create a lazy reference to a table for dplyr operations.
\itemize{
\item \code{table_name}: Name of the table
}
}
\item{\code{process_domain(domain, data_type = "neurocog", scales = NULL)}}{
Process a specific domain using SQL.
\itemize{
\item \code{domain}: Domain name to process
\item \code{data_type}: Type of data ("neurocog", "neurobehav", or "validity")
\item \code{scales}: Optional vector of scales to include
}
}
\item{\code{calculate_z_stats(table_name, group_vars)}}{
Calculate z-score statistics.
\itemize{
\item \code{table_name}: Table to process
\item \code{group_vars}: Vector of grouping variables
}
}
\item{\code{export_to_r6(domain, processor_class = "DomainProcessorR6")}}{
Export query results to standard R6 processors.
\itemize{
\item \code{domain}: Domain to export
\item \code{processor_class}: R6 class to use (default: DomainProcessorR6)
}
}
\item{\code{get_domain_summary(include_all = TRUE)}}{
Get domain summary statistics using SQL.
\itemize{
\item \code{include_all}: Whether to include all domains
}
}
\item{\code{create_indexes()}}{
Create optimized indexes for faster queries.
}
}
}

\section{Parameters (for methods above)}{

\describe{
\item{\code{db_path}}{Path to a DuckDB database file. Use \code{NULL} for temporary/in-memory.}
\item{\code{data_dir}}{Directory containing input data files to auto-register or scan.}
\item{\code{auto_register}}{Logical; if \code{TRUE}, attempt to auto-register common files on init.}
\item{\code{file_path}}{Path to a single data file (CSV/TSV/Parquet/Feather/Arrow).}
\item{\code{table_name}}{Name of the DuckDB table to create/register or reference.}
\item{\code{options}}{List of reader options for CSV/TSV registration (e.g., \code{delim}, \code{na}, \code{header}).}
\item{\code{pattern}}{File name pattern (regular expression) used when bulk-registering CSV/TSV files.}
\item{\code{formats}}{Character vector of file formats to search for during bulk registration.}
\item{\code{output_path}}{Path to write Parquet output (file or directory).}
\item{\code{compression}}{Compression codec for Parquet writes (e.g., \code{"zstd"}, \code{"snappy"}).}
\item{\code{query}}{SQL query string for eager results.}
\item{\code{statement}}{SQL statement string for non-query operations.}
\item{\code{params}}{Optional named list of parameter bindings for parameterized SQL.}
\item{\code{domain}}{Domain key/name to process (e.g., \code{"attention"}, \code{"executive"}).}
\item{\code{data_type}}{Either \code{"neurocognitive"} or \code{"neurobehavioral"}.}
\item{\code{scales}}{Optional character vector of scale IDs or names to include.}
\item{\code{group_vars}}{Optional character vector of grouping variables for z-score summaries.}
\item{\code{processor_class}}{R6 generator or instance that will receive exported data.}
\item{\code{include_all}}{Logical; when \code{TRUE}, include all known domains in the summary.}
}
}

\examples{
\dontrun{
p <- DuckDBProcessorR6$new(db_path = NULL, data_dir = "data-raw/csv", auto_register = TRUE)
p$connect()
p$register_csv("data-raw/csv/wisc5.csv", "wisc5")
df <- p$query("SELECT * FROM wisc5 LIMIT 5")
p$disconnect()
}

}
\seealso{
\pkg{duckdb}, \pkg{DBI}, \pkg{dbplyr}, \pkg{dplyr}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{con}}{Database connection object}

\item{\code{db_path}}{Database file path}

\item{\code{tables}}{Registered tables}

\item{\code{data_paths}}{Data file paths}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DuckDBProcessorR6-new}{\code{DuckDBProcessorR6$new()}}
\item \href{#method-DuckDBProcessorR6-connect}{\code{DuckDBProcessorR6$connect()}}
\item \href{#method-DuckDBProcessorR6-disconnect}{\code{DuckDBProcessorR6$disconnect()}}
\item \href{#method-DuckDBProcessorR6-register_csv}{\code{DuckDBProcessorR6$register_csv()}}
\item \href{#method-DuckDBProcessorR6-register_parquet}{\code{DuckDBProcessorR6$register_parquet()}}
\item \href{#method-DuckDBProcessorR6-register_arrow}{\code{DuckDBProcessorR6$register_arrow()}}
\item \href{#method-DuckDBProcessorR6-register_all_csvs}{\code{DuckDBProcessorR6$register_all_csvs()}}
\item \href{#method-DuckDBProcessorR6-register_all_files}{\code{DuckDBProcessorR6$register_all_files()}}
\item \href{#method-DuckDBProcessorR6-export_to_parquet}{\code{DuckDBProcessorR6$export_to_parquet()}}
\item \href{#method-DuckDBProcessorR6-query}{\code{DuckDBProcessorR6$query()}}
\item \href{#method-DuckDBProcessorR6-execute}{\code{DuckDBProcessorR6$execute()}}
\item \href{#method-DuckDBProcessorR6-query_lazy}{\code{DuckDBProcessorR6$query_lazy()}}
\item \href{#method-DuckDBProcessorR6-process_domain}{\code{DuckDBProcessorR6$process_domain()}}
\item \href{#method-DuckDBProcessorR6-calculate_z_stats}{\code{DuckDBProcessorR6$calculate_z_stats()}}
\item \href{#method-DuckDBProcessorR6-export_to_r6}{\code{DuckDBProcessorR6$export_to_r6()}}
\item \href{#method-DuckDBProcessorR6-get_domain_summary}{\code{DuckDBProcessorR6$get_domain_summary()}}
\item \href{#method-DuckDBProcessorR6-create_indexes}{\code{DuckDBProcessorR6$create_indexes()}}
\item \href{#method-DuckDBProcessorR6-clone}{\code{DuckDBProcessorR6$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-new"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$new(
  db_path = ":memory:",
  data_dir = "data",
  auto_register = TRUE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-connect"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-connect}{}}}
\subsection{Method \code{connect()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$connect()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-disconnect"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-disconnect}{}}}
\subsection{Method \code{disconnect()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$disconnect()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_csv"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_csv}{}}}
\subsection{Method \code{register_csv()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_csv(file_path, table_name = NULL, options = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_parquet"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_parquet}{}}}
\subsection{Method \code{register_parquet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_parquet(file_path, table_name = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_arrow"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_arrow}{}}}
\subsection{Method \code{register_arrow()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_arrow(file_path, table_name = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_all_csvs"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_all_csvs}{}}}
\subsection{Method \code{register_all_csvs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_all_csvs(data_dir = "data", pattern = "*.csv")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-register_all_files"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-register_all_files}{}}}
\subsection{Method \code{register_all_files()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$register_all_files(
  data_dir = "data",
  formats = c("parquet", "arrow", "csv")
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-export_to_parquet"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-export_to_parquet}{}}}
\subsection{Method \code{export_to_parquet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$export_to_parquet(
  table_name,
  output_path,
  compression = "zstd"
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-query"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-query}{}}}
\subsection{Method \code{query()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$query(query, params = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-execute"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-execute}{}}}
\subsection{Method \code{execute()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$execute(statement, params = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-query_lazy"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-query_lazy}{}}}
\subsection{Method \code{query_lazy()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$query_lazy(table_name)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-process_domain"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-process_domain}{}}}
\subsection{Method \code{process_domain()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$process_domain(domain, data_type = "neurocog", scales = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-calculate_z_stats"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-calculate_z_stats}{}}}
\subsection{Method \code{calculate_z_stats()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$calculate_z_stats(table_name, group_vars)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-export_to_r6"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-export_to_r6}{}}}
\subsection{Method \code{export_to_r6()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$export_to_r6(domain, processor_class = "DomainProcessorR6")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-get_domain_summary"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-get_domain_summary}{}}}
\subsection{Method \code{get_domain_summary()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$get_domain_summary(include_all = TRUE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-create_indexes"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-create_indexes}{}}}
\subsection{Method \code{create_indexes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$create_indexes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DuckDBProcessorR6-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DuckDBProcessorR6-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DuckDBProcessorR6$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
