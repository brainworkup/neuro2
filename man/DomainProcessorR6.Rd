% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DomainProcessorR6.R
\name{DomainProcessorR6}
\alias{DomainProcessorR6}
\title{DomainProcessorR6 Class - Refactored Version}
\description{
An R6 class that encapsulates a complete data processing pipeline for
neuropsychological domains with improved error handling and modularity.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{domains}}{Character vector of domain names to process}

\item{\code{pheno}}{Character string specifying the phenotype identifier}

\item{\code{input_file}}{Character string path to the input data file}

\item{\code{output_dir}}{Character string path to the output directory}

\item{\code{scale_source}}{Optional source for scale information}

\item{\code{test_filters}}{List of test filters by rater type}

\item{\code{data}}{Data frame containing the processed data}

\item{\code{config}}{List containing configuration parameters}

\item{\code{logger}}{List containing logging functions}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DomainProcessorR6-new}{\code{DomainProcessorR6$new()}}
\item \href{#method-DomainProcessorR6-load_data}{\code{DomainProcessorR6$load_data()}}
\item \href{#method-DomainProcessorR6-filter_by_domain}{\code{DomainProcessorR6$filter_by_domain()}}
\item \href{#method-DomainProcessorR6-select_columns}{\code{DomainProcessorR6$select_columns()}}
\item \href{#method-DomainProcessorR6-save_data}{\code{DomainProcessorR6$save_data()}}
\item \href{#method-DomainProcessorR6-get_scales}{\code{DomainProcessorR6$get_scales()}}
\item \href{#method-DomainProcessorR6-get_domain_number}{\code{DomainProcessorR6$get_domain_number()}}
\item \href{#method-DomainProcessorR6-has_multiple_raters}{\code{DomainProcessorR6$has_multiple_raters()}}
\item \href{#method-DomainProcessorR6-detect_emotion_type}{\code{DomainProcessorR6$detect_emotion_type()}}
\item \href{#method-DomainProcessorR6-get_rater_types}{\code{DomainProcessorR6$get_rater_types()}}
\item \href{#method-DomainProcessorR6-generate_domain_qmd}{\code{DomainProcessorR6$generate_domain_qmd()}}
\item \href{#method-DomainProcessorR6-process}{\code{DomainProcessorR6$process()}}
\item \href{#method-DomainProcessorR6-clone}{\code{DomainProcessorR6$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-new"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new DomainProcessorR6 object with configuration parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$new(
  domains,
  pheno,
  input_file,
  output_dir = "data",
  scale_source = NULL,
  test_filters = NULL,
  config = NULL,
  logger = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domains}}{Character vector of domain names to process}

\item{\code{pheno}}{Character string specifying the phenotype identifier}

\item{\code{input_file}}{Character string path to the input data file}

\item{\code{output_dir}}{Character string path to the output directory (default: "data")}

\item{\code{scale_source}}{Optional source for scale information}

\item{\code{test_filters}}{List of test filters by rater type}

\item{\code{config}}{List containing configuration parameters}

\item{\code{logger}}{List containing logging functions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new DomainProcessorR6 object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-load_data"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-load_data}{}}}
\subsection{Method \code{load_data()}}{
Load data from the specified input file with error handling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$load_data()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns self for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-filter_by_domain"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-filter_by_domain}{}}}
\subsection{Method \code{filter_by_domain()}}{
Filter data to include only the specified domains.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$filter_by_domain()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns self for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-select_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-select_columns}{}}}
\subsection{Method \code{select_columns()}}{
Select relevant columns from the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$select_columns()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns self for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-save_data"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-save_data}{}}}
\subsection{Method \code{save_data()}}{
Save the processed data to a file with validation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$save_data(filename = NULL, format = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filename}}{Optional filename for the output file}

\item{\code{format}}{Optional format for the output file (csv, parquet, feather)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns self for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-get_scales"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-get_scales}{}}}
\subsection{Method \code{get_scales()}}{
Get scale names for the specified phenotype.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$get_scales()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector of scale names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-get_domain_number"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-get_domain_number}{}}}
\subsection{Method \code{get_domain_number()}}{
Get the domain number for file naming.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$get_domain_number()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character string with the domain number
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-has_multiple_raters"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-has_multiple_raters}{}}}
\subsection{Method \code{has_multiple_raters()}}{
Check if domain has multiple raters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$has_multiple_raters()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical value indicating if domain has multiple raters
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-detect_emotion_type"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-detect_emotion_type}{}}}
\subsection{Method \code{detect_emotion_type()}}{
Detect if this is a child or adult emotion domain.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$detect_emotion_type()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character string "child" or "adult", or NULL if not emotion domain
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-get_rater_types"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-get_rater_types}{}}}
\subsection{Method \code{get_rater_types()}}{
Get rater types for the domain.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$get_rater_types()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector of rater types or NULL if single-rater
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-generate_domain_qmd"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-generate_domain_qmd}{}}}
\subsection{Method \code{generate_domain_qmd()}}{
Generate domain QMD file using templates.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$generate_domain_qmd(domain_name = NULL, output_file = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domain_name}}{Optional domain name to use}

\item{\code{output_file}}{Optional output file path}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character string path to the generated QMD file
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-process"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-process}{}}}
\subsection{Method \code{process()}}{
Run the complete processing pipeline.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$process(
  generate_reports = TRUE,
  report_types = c("self"),
  generate_domain_files = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{generate_reports}}{Logical whether to generate reports}

\item{\code{report_types}}{Character vector of report types to generate}

\item{\code{generate_domain_files}}{Logical whether to generate domain files}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns self for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DomainProcessorR6-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DomainProcessorR6-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DomainProcessorR6$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
