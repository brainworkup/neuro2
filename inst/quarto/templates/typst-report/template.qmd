---
title: NEUROCOGNITIVE EXAMINATION
patient: Biggie
name: Smalls, Biggie
doe: "YYYY-MM-DD"
date_of_report: last-modified
---

```{r}
#| label: setup
#| include: false
#| cache: false

# Load required packages
suppressPackageStartupMessages({
  library(dplyr)
  library(readr)
  library(here)
  library(yaml)
})

# Source the domain processor
source("R/DomainProcessorR6.R")
source("R/NeuropsychResultsR6.R")
source("R/DotplotR6.R")
source("R/TableGTR6.R")
source("R/score_type_utils.R")

# Set knitr options
knitr::opts_knit$set(
  width = 80,
  digits = 2,
  warnPartialMatchArgs = FALSE,
  crop = knitr::hook_pdfcrop,
  optipng = knitr::hook_optipng
)

# Set environment variables with default values
Sys.setenv(PATIENT = "{{< var patient >}}")
patient <- Sys.getenv("PATIENT")
```

```{=typst}
#let case_number = [{{< var case_number >}}]
#let name = [{{< var last_name >}}, {{< var first_name >}}]
#let doe = [{{< var date_of_report >}}]
#let patient = [{{< var patient >}}]
#v(2em, weak: true)
#show block: set par(leading: 0.65em)
#block[
*CASE NUMBER:* #case_number \
*PATIENT NAME:* #name \
*DATE OF BIRTH:* {{< var dob >}}, Age {{< var age >}} \
*DATES OF EXAM:* {{< var doe >}}, {{< var doe2 >}}, and {{< var doe3 >}} \
*DATE OF REPORT*: {{< var date_of_report >}} \
]
```
{{< include _00-00_tests.qmd >}}

{{< include _01-00_nse_forensic.qmd >}}

{{< include _01-01_behav_obs.qmd >}}

```{=typst}
= NEUROCOGNITIVE FINDINGS
```
```{r}
#| label: generate-domain-files
#| include: false
#| cache: false

# Generate domain files only if they don't exist
# This runs once to create the domain structure

#| label: generate-domain-files
#| include: false
#| cache: false

# Track which files have been generated to avoid duplicates
generated_files <- character()

domain_config <- list(
  "01" = list(
    domains = "General Cognitive Ability",
    pheno = "iq",
    input_file = "data/neurocog.parquet"
  ),
  "02" = list(
    domains = "Academic Skills",
    pheno = "academics",
    input_file = "data/neurocog.parquet"
  ),
  "03" = list(
    domains = "Verbal/Language",
    pheno = "verbal",
    input_file = "data/neurocog.parquet"
  ),
  "04" = list(
    domains = "Visual Perception/Construction",
    pheno = "spatial",
    input_file = "data/neurocog.parquet"
  ),
  "05" = list(
    domains = "Memory",
    pheno = "memory",
    input_file = "data/neurocog.parquet"
  ),
  "06" = list(
    domains = "Attention/Executive",
    pheno = "executive",
    input_file = "data/neurocog.parquet"
  ),
  "07" = list(
    domains = "Motor",
    pheno = "motor",
    input_file = "data/neurocog.parquet"
  ),
  "08" = list(
    domains = "Social Cognition",
    pheno = "social",
    input_file = "data/neurocog.parquet"
  ),
  "09" = list(
    domains = "ADHD",
    pheno = "adhd",
    input_file = "data/neurobehav.parquet"
  ),
  "10" = list(
    domains = c(
      "Behavioral/Emotional/Social",
      "Psychiatric Disorders",
      "Personality Disorders",
      "Psychosocial Problems",
      "Substance Use"
    ),
    pheno = "emotion",
    input_file = "data/neurobehav.parquet"
  ),
  "11" = list(
    domains = "Adaptive Functioning",
    pheno = "adaptive",
    input_file = "data/neurobehav.parquet"
  ),
  "12" = list(
    domains = "Daily Living",
    pheno = "daily_living",
    input_file = "data/neurocog.parquet"
  )
)

# Process each domain configuration
for (number in names(domain_config)) {
  config <- domain_config[[number]]

  # Check if we've already generated a file for this phenotype
  if (config$pheno == "emotion") {
    # Handle emotion domain specially - only generate once
    emotion_file_child <- paste0("_02-", number, "_emotion_child.qmd")
    emotion_file_adult <- paste0("_02-", number, "_emotion_adult.qmd")

    # Skip if already generated
    if (
      emotion_file_child %in%
        generated_files ||
        emotion_file_adult %in% generated_files ||
        file.exists(emotion_file_child) ||
        file.exists(emotion_file_adult)
    ) {
      next
    }

    # Check if data exists
    if (file.exists(config$input_file)) {
      processor <- DomainProcessorR6$new(
        domains = config$domains, # Pass ALL emotion domains
        pheno = config$pheno,
        input_file = config$input_file,
        number = number
      )

      processor$load_data()
      processor$filter_by_domain()

      if (!is.null(processor$data) && nrow(processor$data) > 0) {
        # Determine emotion type from actual data
        emotion_type <- processor$detect_emotion_type()

        if (emotion_type == "child") {
          if (!file.exists(emotion_file_child)) {
            processor$generate_emotion_child_qmd(
              "Behavioral/Emotional/Social",
              emotion_file_child
            )
            generated_files <- c(generated_files, emotion_file_child)
            message(paste("Generated:", emotion_file_child))
          }
        } else if (emotion_type == "adult") {
          if (!file.exists(emotion_file_adult)) {
            processor$generate_emotion_adult_qmd(
              "Emotional/Behavioral/Personality",
              emotion_file_adult
            )
            generated_files <- c(generated_files, emotion_file_adult)
            message(paste("Generated:", emotion_file_adult))
          }
        }
      }
    }
  } else if (config$pheno == "adhd") {
    # Handle ADHD domain specially
    adhd_file_child <- paste0("_02-", number, "_adhd_child.qmd")
    adhd_file_adult <- paste0("_02-", number, "_adhd_adult.qmd")

    # Skip if already generated
    if (
      adhd_file_child %in%
        generated_files ||
        adhd_file_adult %in% generated_files ||
        file.exists(adhd_file_child) ||
        file.exists(adhd_file_adult)
    ) {
      next
    }

    if (file.exists(config$input_file)) {
      processor <- DomainProcessorR6$new(
        domains = config$domains,
        pheno = config$pheno,
        input_file = config$input_file,
        number = number
      )

      processor$load_data()
      processor$filter_by_domain()

      if (!is.null(processor$data) && nrow(processor$data) > 0) {
        # Determine if child or adult ADHD
        is_child <- any(grepl(
          "child|adolescent",
          processor$data$test_name,
          ignore.case = TRUE
        ))

        if (is_child) {
          if (!file.exists(adhd_file_child)) {
            processor$generate_adhd_child_qmd("ADHD", adhd_file_child)
            generated_files <- c(generated_files, adhd_file_child)
            message(paste("Generated:", adhd_file_child))
          }
        } else {
          if (!file.exists(adhd_file_adult)) {
            processor$generate_adhd_adult_qmd("ADHD", adhd_file_adult)
            generated_files <- c(generated_files, adhd_file_adult)
            message(paste("Generated:", adhd_file_adult))
          }
        }
      }
    }
  } else {
    # Regular domain processing
    domain_file <- paste0("_02-", number, "_", config$pheno, ".qmd")

    # Skip if already generated
    if (domain_file %in% generated_files || file.exists(domain_file)) {
      next
    }

    if (file.exists(config$input_file)) {
      processor <- DomainProcessorR6$new(
        domains = config$domains,
        pheno = config$pheno,
        input_file = config$input_file,
        number = number
      )

      processor$load_data()
      processor$filter_by_domain()

      if (!is.null(processor$data) && nrow(processor$data) > 0) {
        processor$generate_domain_qmd()
        generated_files <- c(generated_files, domain_file)
        message(paste("Generated:", domain_file))
      }
    }
  }
}

# Get list of all generated domain files (remove duplicates)
available_domains <- unique(list.files(pattern = "^_02-[0-9]{2}_.*\\.qmd$"))
available_domains <- sort(available_domains)

# Debug: Show what files we're including
message("\nFiles to be included in report:")
for (file in available_domains) {
  message(paste("  -", file))
}

# Create the include file with unique entries only
if (length(available_domains) > 0) {
  include_content <- paste0("{{< include ", available_domains, " >}}")
  writeLines(include_content, "_domains_to_include.qmd")
  message(paste(
    "\nCreated _domains_to_include.qmd with",
    length(available_domains),
    "unique domain files"
  ))
} else {
  # Create empty file if no domains
  writeLines("", "_domains_to_include.qmd")
  warning("No domain files were generated!")
}
```

<!-- Domain sections - dynamically included based on available data -->

{{< include _domains_to_include.qmd >}}

{{< pagebreak >}}

{{< include _03-00_sirf.qmd >}}

{{< include _03-00_sirf_text.qmd >}}

{{< include _03-01_recs.qmd >}}

{{< include _03-02_signature.qmd >}}

{{< pagebreak >}}

{{< include _03-03_appendix.qmd >}}
