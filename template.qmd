---
title: NEUROCOGNITIVE EXAMINATION
patient: Ethan
name: Smalls, Ethan
doe: "YYYY-MM-DD"
date_of_report: last-modified
---

```{r}
#| label: setup
#| include: false
#| cache: false

# Load required packages
suppressPackageStartupMessages({
  library(dplyr)
  library(readr)
  library(here)
  library(yaml)
  library(neuro2)
})

# Source all required R6 classes for Quarto rendering
# These are needed when the domain files execute their R code
if (file.exists("R/ScoreTypeCacheR6.R")) {
  source("R/ScoreTypeCacheR6.R")
}
if (file.exists("R/DomainProcessorR6.R")) {
  source("R/DomainProcessorR6.R") 
}
if (file.exists("R/TableGTR6.R")) {
  source("R/TableGTR6.R")
}
if (file.exists("R/DotplotR6.R")) {
  source("R/DotplotR6.R")
}
if (file.exists("R/NeuropsychReportSystemR6.R")) {
  source("R/NeuropsychReportSystemR6.R")
}

# Source utility functions needed by domain processing
if (file.exists("R/domain_processing_utils.R")) {
  source("R/domain_processing_utils.R")
}

# Set knitr options
knitr::opts_knit$set(
  width = 80,
  digits = 2,
  warnPartialMatchArgs = FALSE,
  crop = knitr::hook_pdfcrop,
  optipng = knitr::hook_optipng
)

# Set environment variables with default values
Sys.setenv(PATIENT = "{{< var patient >}}")
patient <- Sys.getenv("PATIENT")
```

{{< var case_number >}} should be replaced with case_number variable in yaml

```{=typst}
#let case_number = [{{< var case_number >}}]
```{r}
#| label: check-domain-files
#| include: false

# Check for already-generated domain files
# (Domain files are generated by the workflow before Quarto rendering)
available_domains <- list.files(pattern = "^_02-[0-9]{2}_.*\\.qmd$")

# Filter out _text.qmd files specifically, but keep all others
available_domains <- available_domains[
  !grepl("_text.*\\.qmd$", available_domains)
]
available_domains <- sort(available_domains)

# Debug: Show what files we're including
message("\nFiles to be included in report:")
for (file in available_domains) {
  message(paste("  -", file))
}

# Create the include file with unique entries only
if (length(available_domains) > 0) {
  include_content <- paste0("{{< include ", available_domains, " >}}")
  # Add blank lines between each include statement for Quarto compatibility
  include_with_breaks <- paste(include_content, collapse = "\n\n")
  writeLines(include_with_breaks, "_domains_to_include.qmd")
  message(paste(
    "\nCreated _domains_to_include.qmd with",
    length(available_domains),
    "unique domain files"
  ))
} else {
  # Create empty file if no domains
  writeLines("", "_domains_to_include.qmd")
  warning("No domain files were generated!")
}
```

<!-- Domain sections - dynamically included based on available data -->

{{< include _domains_to_include.qmd >}}
# Debug: Show what files we're including
message("\nFiles to be included in report:")
for (file in available_domains) {
  message(paste("  -", file))
}

# Create the include file with unique entries only
if (length(available_domains) > 0) {
  include_content <- paste0("{{< include ", available_domains, " >}}")
  # Add blank lines between each include statement for Quarto compatibility
  include_with_breaks <- paste(include_content, collapse = "\n\n")
  writeLines(include_with_breaks, "_domains_to_include.qmd")
  message(paste(
    "\nCreated _domains_to_include.qmd with",
    length(available_domains),
    "unique domain files"
  ))
} else {
  # Create empty file if no domains
  writeLines("", "_domains_to_include.qmd")
  warning("No domain files were generated!")
}
``` include _domains_to_include.qmd >}}

{{< pagebreak >}}

{{< include _03-00_sirf.qmd >}}

{{< include _03-00_sirf_text.qmd >}}

{{< include _03-01_recs.qmd >}}

{{< include _03-02_signature.qmd >}}

{{< pagebreak >}}

{{< include _03-03_appendix.qmd >}}
