## Emotional/Behavioral/Personality {#sec-emotion_adult}

{{< include _02-10_emotion_adult_text.qmd >}}

```{r}
#| label: setup-emotion_adult
#| include: false

# Source R6 classes
source("R/DomainProcessorR6.R")
source("R/NeuropsychResultsR6.R")
source("R/DotplotR6.R")
source("R/TableGT_Modified.R")

# Filter by domain
domains <- c("Emotional/Behavioral/Personality")

# Target phenotype
pheno <- "emotion_adult"

# Create R6 processor
processor_emotion_adult <- DomainProcessorR6$new(
  domains = domains,
  pheno = pheno,
  input_file = "data/neurobehav.parquet" # Note: Using neurobehav instead of neurocog
)

# Load and process data
processor_emotion_adult$load_data()
processor_emotion_adult$filter_by_domain()

# Create the data object with original name for compatibility
emotion_adult <- processor_emotion_adult$data
```

```{r}
#| label: export-emotion_adult
#| include: false
#| eval: true

# Process and export data using R6
processor_emotion_adult$select_columns()
processor_emotion_adult$save_data()

# Update the original object
emotion_adult <- processor_emotion_adult$data
```

```{r}
#| label: data-emotion_adult
#| include: false
#| eval: true

# Define the scales of interest for emotional/behavioral/personality
scales <- c(
  "Aggression",
  "Anger",
  "Anxiety",
  "Anxiety-Related Disorders",
  "Antisocial Features",
  "Attention Problems",
  "Borderline Features",
  "Conversion",
  "Depression",
  "Dominance",
  "Drug Problems",
  "Externalizing Problems",
  "Health Concerns",
  "Hyperactivity",
  "Internalizing Problems",
  "Mania",
  "Negative Impression",
  "Nonsupport",
  "Obsessive-Compulsive",
  "Paranoia",
  "Personality Disorders",
  "Positive Impression",
  "Psychopathology",
  "Schizophrenia",
  "Somatic Complaints",
  "Somatization",
  "Stress",
  "Suicidal Ideation",
  "Thought Disorder",
  "Treatment Rejection",
  "Warmth"
)

# Filter the data directly without using NeurotypR
filter_data <- function(data, domain, scale) {
  # Filter by domain if provided
  if (!is.null(domain)) {
    data <- data[data$domain %in% domain, ]
  }

  # Filter by scale if provided
  if (!is.null(scale)) {
    data <- data[data$scale %in% scale, ]
  }

  return(data)
}

# Apply the filter function
data_emotion_adult <- filter_data(
  data = emotion_adult,
  domain = domains,
  scale = scales
)
```

```{r}
#| label: text-emotion_adult
#| cache: true
#| include: false

# Generate text using R6 class
results_processor <- NeuropsychResultsR6$new(
  data = data_emotion_adult,
  file = "_02-10_emotion_adult_text.qmd"
)
results_processor$process()
```

```{r}
#| label: qtbl-emotion_adult
#| include: false
#| eval: true

# Table parameters
table_name <- "table_emotion_adult"
vertical_padding <- 0
multiline <- TRUE

# Create table using our modified TableGT_Modified R6 class
table_gt <- TableGT_Modified$new(
  data = data_emotion_adult,
  pheno = pheno,
  table_name = table_name,
  vertical_padding = vertical_padding,
  source_note = "T-score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰]", # Note: Changed to T-score
  multiline = multiline
)

# Get the table object without automatic saving
tbl <- table_gt$build_table()

# Save the table using our save_table method
table_gt$save_table(tbl)
```

```{r}
#| label: fig-emotion_adult-subdomain
#| include: false
#| eval: true

# Create subdomain plot using R6 DotplotR6
dotplot_subdomain <- DotplotR6$new(
  data = data_emotion_adult,
  x = "z_mean_subdomain",
  y = "subdomain",
  filename = "fig_emotion_adult_subdomain.svg"
)
dotplot_subdomain$create_plot()
```

::: {.typst-code}
```{=typst}
// Define a function to create a domain with a title, a table, and a figure
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [Performance across cognitive domains. #footnote[All scores in these figures have been standardized as z-scores.]],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}
```
:::

::: {.typst-code}
```{=typst}
// Define the title of the domain
#let title = "Emotional/Behavioral/Personality"

// Define the file name of the table
#let file_qtbl = "table_emotion_adult.png"

// Define the file name of the figure
#let file_fig = "fig_emotion_adult_subdomain.svg"

// The title is appended with ' Scores'
#domain(title: [#title Scores], file_qtbl, file_fig)
```
:::
