## Emotional/Behavioral/Personality {#sec-emotion-adult}

{{< include _02-10_emotion_adult_text.qmd >}}

```{r}
#| label: setup-emotion-adult
#| include: false

# Source R6 classes
source("R/DomainProcessorR6.R")
source("R/NeuropsychResultsR6.R")
source("R/DotplotR6.R")
source("R/TableGT_ModifiedR6.R")

# Filter by domain
domains <- c("Emotional/Behavioral/Personality")

# Target phenotype
pheno <- "emotion"

# Create R6 processor
processor_emotion <- DomainProcessorR6$new(
  domains = domains,
  pheno = pheno,
  input_file = "data/neurobehav.parquet"
)

# Load and process data
processor_emotion$load_data()
processor_emotion$filter_by_domain()

# Create the data object with original name for compatibility
emotion <- processor_emotion$data

# Process and export data using R6
processor_emotion$select_columns()
processor_emotion$save_data()

# Update the original object
emotion <- processor_emotion$data

# Load internal data to get standardized scale names
# The scales_emotion_adult object is available from the package's internal data
if (!exists("scales_emotion_adult")) {
  # Load from sysdata.rda
  sysdata_path <- here::here("R", "sysdata.rda")
  if (file.exists(sysdata_path)) {
    load(sysdata_path)
  } else {
    stop(
      "Could not load scales_emotion_adult from sysdata.rda. Please ensure the internal data file exists."
    )
  }
}

scales <- scales_emotion_adult

# Filter the data directly without using NeurotypR
filter_data <- function(data, domain, scale) {
  # Filter by domain if provided
  if (!is.null(domain)) {
    data <- data[data$domain %in% domain, ]
  }

  # Filter by scale if provided
  if (!is.null(scale)) {
    data <- data[data$scale %in% scale, ]
  }

  return(data)
}

# Apply the filter function
data_emotion <- filter_data(data = emotion, domain = domains, scale = scales)
```

```{r}
#| label: text-emotion-adult
#| cache: true
#| include: false

# Generate text using R6 class
results_processor <- NeuropsychResultsR6$new(
  data = data_emotion,
  file = "_02-10_emotion_adult_text.qmd"
)
results_processor$process()
```


```{r}
#| label: qtbl-emotion-adult
#| include: false
#| eval: true

# Table parameters
table_name <- "table_emotion_adult"
vertical_padding <- 0
multiline <- TRUE

# Create table using our modified TableGT_ModifiedR6 R6 class
table_gt <- TableGT_ModifiedR6$new(
  data = data_emotion,
  pheno = pheno,
  table_name = table_name,
  vertical_padding = vertical_padding,
  source_note = "T-score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰]",
  multiline = multiline
)

# Get the table object without automatic saving
tbl <- table_gt$build_table()

# Save the table using our save_table method
table_gt$save_table(tbl, dir = here::here())
```


```{r}
#| label: fig-emotion-adult-subdomain
#| include: false
#| eval: true

# Create subdomain plot using R6 DotplotR6
dotplot_subdomain <- DotplotR6$new(
  data = data_emotion,
  x = "z_mean_subdomain",
  y = "subdomain",
  filename = here::here("fig_emotion_adult_subdomain.svg")
)
dotplot_subdomain$create_plot()

# Load plot title from sysdata.rda
plot_title_var <- "plot_title_emotion_adult"
if (!exists(plot_title_var)) {
  sysdata_path <- here::here("R", "sysdata.rda")
  if (file.exists(sysdata_path)) {
    load(sysdata_path)
  }
}

# Get the plot title or use default
if (exists(plot_title_var)) {
  plot_title_emotion <- get(plot_title_var)
} else {
  plot_title_emotion <- "This section presents results from the Personality Disorders domain assessment."
}
```

```{=typst}
// Define a function to create a domain with a title, a table, and a figure
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)

  // Make all figure labels (Table X:, Figure X:) bold
  show figure.caption: it => {
    context {
      let supplement = it.supplement
      let counter = it.counter.display(it.numbering)
      block[*#supplement #counter:* #it.body]
    }
  }

  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [`{r} plot_title_emotion_adult`],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}
```

```{=typst}
// Define the title of the domain
#let title = "Emotional/Behavioral/Personality"

// Define the file name of the table
#let file_qtbl = "table_emotion_adult.png"

// Define the file name of the figure
#let file_fig = "fig_emotion_adult_subdomain.svg"

// Call the 'domain' function with the specified title, table file name, and figure file name
#domain(title: [#title], file_qtbl, file_fig)
```
