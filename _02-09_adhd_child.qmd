## ADHD {#sec-adhd-child}

```{r}
#| label: setup-adhd-child
#| include: false

# Source R6 classes
source("R/DomainProcessorR6.R")
source("R/NeuropsychResultsR6.R")
source("R/DotplotR6.R")
source("R/TableGT_Modified.R")

# Filter by domain
domains <- c("ADHD")

# Target phenotype
pheno <- "adhd_child"

# Create R6 processor
processor_adhd_child <- DomainProcessorR6$new(
  domains = domains,
  pheno = pheno,
  input_file = "data/neurobehav.parquet" # Note: Using neurobehav instead of neurocog
)

# Load and process data
processor_adhd_child$load_data()
processor_adhd_child$filter_by_domain()

# Create the data object with original name for compatibility
adhd_child <- processor_adhd_child$data
```

```{r}
#| label: export-adhd-child
#| include: false
#| eval: true

# Process and export data using R6
processor_adhd_child$select_columns()
processor_adhd_child$save_data()

# Update the original object
adhd_child <- processor_adhd_child$data
```

```{r}
#| label: data-adhd_child
#| include: false
#| eval: true

# Load internal data to get standardized scale names
# The scales_adhd_child object is available from the package's internal data
# This ensures we always use the standardized 44 ADHD scales
if (!exists("scales_adhd_child")) {
  # Load from sysdata.rda
  sysdata_path <- here::here("R", "sysdata.rda")
  if (file.exists(sysdata_path)) {
    load(sysdata_path)
  } else {
    stop(
      "Could not load scales_adhd_child from sysdata.rda. Please ensure the internal data file exists."
    )
  }
}

# Use the standardized scales from internal data
# This provides all 44 ADHD-related scales including:
# - BROWN EF/A scales (Activation, Focus, Effort, Emotion, Memory, Action)
# - CAARS scales (various ADHD indices and symptom scales)
# - CEFI scales (executive function scales)
# - And other standardized ADHD assessment scales
scales <- scales_adhd_child

# Filter the data directly without using NeurotypR
filter_data <- function(data, domain, scale) {
  # Filter by domain if provided
  if (!is.null(domain)) {
    data <- data[data$domain %in% domain, ]
  }

  # Filter by scale if provided
  if (!is.null(scale)) {
    data <- data[data$scale %in% scale, ]
  }

  return(data)
}

# Apply the filter function
data_adhd_child <- filter_data(
  data = adhd_child,
  domain = domains,
  scale = scales
)
```

```{r}
#| label: text-adhd_child
#| cache: true
#| include: false

# Generate text using R6 class
results_processor <- NeuropsychResultsR6$new(
  data = data_adhd_child,
  file = "_02-09_adhd_child_text.qmd"
)
results_processor$process()
```

```{r}
#| label: qtbl-adhd_child
#| include: false
#| eval: true

# Table parameters
table_name <- "table_adhd_child"
vertical_padding <- 0
multiline <- TRUE

# Create table using our modified TableGT_Modified R6 class
table_gt <- TableGT_Modified$new(
  data = data_adhd_child,
  pheno = pheno,
  table_name = table_name,
  vertical_padding = vertical_padding,
  source_note = "T-score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰]", # Note: Changed to T-score
  multiline = multiline
)

# Get the table object without automatic saving
tbl <- table_gt$build_table()

# Save the table using our save_table method
table_gt$save_table(tbl)
```

```{r}
#| label: fig-adhd_child-subdomain
#| include: false
#| eval: true

# Create subdomain plot using R6 DotplotR6
dotplot_subdomain <- DotplotR6$new(
  data = data_adhd_child,
  x = "z_mean_subdomain",
  y = "subdomain",
  filename = "fig_adhd_child_subdomain.svg"
)
dotplot_subdomain$create_plot()
```

```{=typst}
// Define a function to create a domain with a title, a table, and a figure
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [Performance across cognitive domains. #footnote[All scores in these figures have been standardized as z-scores.]],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}
```

### SELF-REPORT

{{< include _02-09_adhd_child_text_self.qmd >}}

```{=typst}
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig)],
      caption: figure.caption(
        position: bottom,
        [Attention and executive functions are multidimensional concepts that contain several related processes. Both concepts require self-regulatory skills and have some common subprocesses; therefore, it is common to treat them together, or even to refer to both processes when talking about one or the other.],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}
```
```{=typst}
#let title = "ADHD/Executive Function Self"
#let file_qtbl = "table_adhd_self.png"
#let file_fig = "fig_adhd_self.svg"
#domain(
  title: [#title],
  file_qtbl,
  file_fig
  )
```

### PARENT RATINGS

{{< include _02-09_adhd_child_text_parent.qmd >}}

```{=typst}
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig)],
      caption: figure.caption(
        position: bottom,
        [
        Attention and executive functions are multidimensional concepts that contain several related processes. Both concepts require self-regulatory skills and have some common subprocesses; therefore, it is common to treat them together, or even to refer to both processes when talking about one or the other.
          ],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}

#let title = "ADHD/Executive Function Parent"
#let file_qtbl = "table_adhd_parent.png"
#let file_fig = "fig_adhd_parent.svg"
#domain(title: [#title], file_qtbl, file_fig)
```

### TEACHER RATINGS

{{< include _02-09_adhd_child_text_teacher.qmd >}}

```{=typst}
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig)],
      caption: figure.caption(
        position: bottom,
        [
        Attention and executive functions are multidimensional concepts that contain several related processes. Both concepts require self-regulatory skills and have some common subprocesses; therefore, it is common to treat them together, or even to refer to both processes when talking about one or the other.
          ],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}

#let title = "ADHD/Executive Function Teacher"
#let file_qtbl = "table_adhd_teacher.png"
#let file_fig = "fig_adhd_teacher.svg"
#domain(title: [#title], file_qtbl, file_fig)
```
