## Behavioral/Emotional/Social {#sec-emotion}

```{r}
#| label: setup-emotion-child
#| include: false

# Load required packages
suppressPackageStartupMessages({
  library(here)
  library(tidyverse)
  library(gt)
  library(gtExtras)
  library(neuro2)
})

# Define domains
domains <- c(
  "Behavioral/Emotional/Social",
  "Psychiatric Disorders",
  "Substance Use",
  "Personality Disorders",
  "Psychosocial Problems"
)

# Load and process data
processor <- DomainProcessorR6$new(
  domains = domains,
  pheno = "emotion",
  input_file = "data/neurobehav.parquet"
)

processor$load_data()
processor$filter_by_domain()
processor$select_columns()

# Main data object
emotion_data <- processor$data

# Separate data by test type (which determines rater)
self_report_tests <- c(
  "basc3_srp_child",
  "basc3_srp_adolescent",
  "basc3_srp_college",
  "brown_efa_self",
  "caars_self",
  "caars2_self",
  "cefi_self_12-18",
  "cefi_self",
  "conners4_self",
  "pai_adol_clinical",
  "pai_adol_validity",
  "pai_adol",
  "pai_clinical",
  "pai_inatt",
  "pai_validity",
  "pai",
  "mmpi3"
)

parent_report_tests <- c(
  "basc3_prs_preschool",
  "basc3_prs_child",
  "basc3_prs_adolescent",
  "basc3_prs_college",
  "cefi_parent_5-18",
  "brown_efa_parent",
  "conners4_parent"
)

teacher_report_tests <- c(
  "basc3_trs_preschool",
  "basc3_trs_child",
  "basc3_trs_adolescent",
  "basc3_trs_college"
)

emotion_self <- emotion_data[emotion_data$test %in% self_report_tests, ]
emotion_parent <- emotion_data[emotion_data$test %in% parent_report_tests, ]
emotion_teacher <- emotion_data[emotion_data$test %in% teacher_report_tests, ]
```

### SELF-REPORT

{{< include _02-10_emotion_child_text_self.qmd >}}

```{r}
#| label: text-emotion-child-self
#| cache: true
#| include: false
#| results: asis

# Filter data for this rater
data_emotion_self <- emotion_self
if ("rater" %in% names(data_emotion_self)) {
  data_emotion_self <- data_emotion_self[data_emotion_self$rater == lf]
}
# Generate text using R6 class
if (nrow(data_emotion_self) > 0) {
  results_processor_self <- NeuropsychResultsR6$new(
    data = data_emotion_self,
    file = "_02-10_emotion_child_text_self.qmd"
  )
  results_processor_self$process()
}
```

```{r}
#| label: qtbl-emotion-child-self
#| dev: tikz
#| fig-process: pdf2png
#| include: false
#| eval: true
options(tikzDefaultEngine = "xetex")

if (nrow(emotion_self) > 0) {
  # Generate table for self-report
  table_self <- TableGTR6$new(
    data = emotion_self,
    pheno = "emotion",
    table_name = "table_emotion_child_self",
    vertical_padding = 0
  )
  tbl_self <- table_self$build_table()
  table_self$save_table(tbl_self, dir = here::here())
}
```

```{r}
#| label: fig-emotion-child-self
#| include: false
#| eval: true

if (nrow(emotion_self) > 0) {
  # Generate figure for self-report
  if (all(c("z_mean_subdomain", "subdomain") %in% names(emotion_self))) {
    dotplot_self <- DotplotR6$new(
      data = emotion_self,
      x = "z_mean_subdomain",
      y = "subdomain",
      filename = here::here("fig_emotion_child_self_subdomain.svg")
    )
    dotplot_self$create_plot()
  }
}

# Set plot title
plot_title_emotion_child_self <- "Emotional and behavioral functioning (self-report) reflects psychological adjustment."
```

```{=typst}
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)

  show figure.caption: it => {
    context {
      let supplement = it.supplement
      let counter = it.counter.display(it.numbering)
      block[*#supplement #counter:* #it.body]
    }
  }

  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [plot_title_emotion_child_self],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}
```

```{=typst}
#let title = "Behavioral/Emotional/Social"
#let file_qtbl = "table_emotion_child_self.png"
#let file_fig = "fig_emotion_child_self_subdomain.svg"
#domain(title: [#title Scores], file_qtbl, file_fig)
```

### PARENT RATINGS

{{< include _02-10_emotion_child_text_parent.qmd >}}

```{r}
#| label: text-emotion-child-parent
#| cache: true
#| include: false
#| results: asis

# Filter data for this rater
data_emotion_parent <- emotion_parent
if ("rater" %in% names(data_emotion_parent)) {
  data_emotion_parent <- data_emotion_parent[data_emotion_parent$rater == lf]
}
# Generate text using R6 class
if (nrow(data_emotion_parent) > 0) {
  results_processor_parent <- NeuropsychResultsR6$new(
    data = data_emotion_parent,
    file = "_02-10_emotion_child_text_parent.qmd"
  )
  results_processor_parent$process()
}
```

```{r}
#| label: qtbl-emotion-child-parent
#| dev: tikz
#| fig-process: pdf2png
#| include: false
#| eval: true
options(tikzDefaultEngine = "xetex")

if (nrow(emotion_parent) > 0) {
  # Generate table for parent-report
  table_parent <- TableGTR6$new(
    data = emotion_parent,
    pheno = "emotion",
    table_name = "table_emotion_child_parent",
    vertical_padding = 0
  )
  tbl_parent <- table_parent$build_table()
  table_parent$save_table(tbl_parent, dir = here::here())
}
```

```{r}
#| label: fig-emotion-child-parent
#| include: false
#| eval: true

if (nrow(emotion_parent) > 0) {
  # Generate figure for parent-report
  if (all(c("z_mean_subdomain", "subdomain") %in% names(emotion_parent))) {
    dotplot_parent <- DotplotR6$new(
      data = emotion_parent,
      x = "z_mean_subdomain",
      y = "subdomain",
      filename = here::here("fig_emotion_child_parent_subdomain.svg")
    )
    dotplot_parent$create_plot()
  }
}

# Set plot title
plot_title_emotion_child_parent <- "Emotional and behavioral functioning (parent-report) reflects psychological adjustment."
```

```{=typst}
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)

  show figure.caption: it => {
    context {
      let supplement = it.supplement
      let counter = it.counter.display(it.numbering)
      block[*#supplement #counter:* #it.body]
    }
  }

  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [Emotional and behavioral functioning (parent-report) reflects psychological adjustment.],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}
```

```{=typst}
#let title = "Behavioral/Emotional/Social"
#let file_qtbl = "table_emotion_child_parent.png"
#let file_fig = "fig_emotion_child_parent_subdomain.svg"
#domain(title: [#title Scores], file_qtbl, file_fig)
```

