## General Cognitive Ability {#sec-iq}

{{< include _02-01_iq_text.qmd >}}

```{r}
#| label: setup-iq-child
#| include: false

# Source R6 classes
source("R/DomainProcessorR6.R")
source("R/NeuropsychResultsR6.R")
source("R/DotplotR6.R")
source("R/TableGT_Modified.R")

# Filter by domain
domains <- c("General Cognitive Ability")

# Target phenotype
pheno <- "iq"

# Create R6 processor
processor_iq <- DomainProcessorR6$new(
  domains = domains,
  pheno = pheno,
  input_file = "data/neurocog.parquet"
)

# Load and process data
processor_iq$load_data()
processor_iq$filter_by_domain()

# Create the data object with original name for compatibility
iq <- processor_iq$data
```

```{r}
#| label: export-iq-child
#| include: false
#| eval: true

# Process and export data using R6
processor_iq$select_columns()
processor_iq$save_data()

# Update the original object
iq <- processor_iq$data
```

```{r}
#| label: data-iq-child
#| include: false
#| eval: true

# Load internal data to get standardized scale names
# The scales_iq_child object is available from the package's internal data
if (!exists("scales_iq_child")) {
  # Load from sysdata.rda
  sysdata_path <- here::here("R", "sysdata.rda")
  if (file.exists(sysdata_path)) {
    load(sysdata_path)
  } else {
    stop(
      "Could not load scales_iq_child from sysdata.rda. Please ensure the internal data file exists."
    )
  }
}

scales <- scales_iq_child

# Filter the data directly without using NeurotypR
filter_data <- function(data, domain, scale) {
  # Filter by domain if provided
  if (!is.null(domain)) {
    data <- data[data$domain %in% domain, ]
  }

  # Filter by scale if provided
  if (!is.null(scale)) {
    data <- data[data$scale %in% scale, ]
  }

  return(data)
}

# Apply the filter function
data_iq <- filter_data(data = iq, domain = domains, scale = scales)
```

```{r}
#| label: text-iq
#| cache: true
#| include: false

# Generate text using R6 class
results_processor <- NeuropsychResultsR6$new(
  data = data_iq,
  file = "_02-01_iq_text.qmd"
)
results_processor$process()
```

```{r}
#| label: qtbl-iq
#| include: false
#| eval: true

# Table parameters
table_name <- "table_iq"
vertical_padding <- 0
multiline <- TRUE

# Create table using our modified TableGT_Modified R6 class
table_gt <- TableGT_Modified$new(
  data = data_iq,
  pheno = pheno,
  table_name = table_name,
  vertical_padding = vertical_padding,
  source_note = "Standard score: Mean = 100 [50th‰], SD ± 15 [16th‰, 84th‰]",
  multiline = multiline
)

# Get the table object without automatic saving
tbl <- table_gt$build_table()

# Save the table using our save_table method
table_gt$save_table(tbl, dir = here::here())
```

```{r}
#| label: fig-iq-subdomain
#| include: false
#| eval: true

# Create subdomain plot using R6 DotplotR6
dotplot_subdomain <- DotplotR6$new(
  data = data_iq,
  x = "z_mean_subdomain",
  y = "subdomain",
  filename = here::here("fig_iq_subdomain.svg")
)
dotplot_subdomain$create_plot()

# Load plot title from sysdata.rda
plot_title_var <- "plot_title_iq"
if (!exists(plot_title_var)) {
  sysdata_path <- here::here("R", "sysdata.rda")
  if (file.exists(sysdata_path)) {
    load(sysdata_path)
  }
}

# Get the plot title or use default
if (exists(plot_title_var)) {
  plot_title_iq <- get(plot_title_var)
} else {
  plot_title_iq <- "Premorbid Ability is an estimate of an individual's
intellectual functioning prior to known or suspected onset of brain disease or
dysfunction. General Ability is the overall skill to reason, solve problems,
and gain useful knowledge. Crystallized Knowledge involves understanding the
world through language and reasoning. Fluid Reasoning is the logical analysis
and solution of new problems, identifying underlying patterns, and applying
logic."
}
```

```{=typst}
// Define a function to create a domain with a title, a table, and a figure
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)

  // Make all figure labels (Table X:, Figure X:) bold
  show figure.caption: it => {
    context {
      let supplement = it.supplement
      let counter = it.counter.display(it.numbering)
      block[*#supplement #counter:* #it.body]
    }
  }

  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [`{r} plot_title_iq`],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}
```
```{=typst}
// Define the title of the domain
#let title = "General Cognitive Ability"

// Define the file name of the table
#let file_qtbl = "table_iq.png"

// Define the file name of the figure
#let file_fig = "fig_iq_subdomain.svg"

// The title is appended with ' Scores'
#domain(title: [#title Scores], file_qtbl, file_fig)
```