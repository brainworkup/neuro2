
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "neuro2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "neuro2-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('neuro2')

Attaching package: ‘neuro2’

The following object is masked from ‘package:base’:

    %||%

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DomainProcessorR6")
> ### * DomainProcessorR6
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DomainProcessorR6
> ### Title: DomainProcessorR6
> ### Aliases: DomainProcessorR6
> 
> ### ** Examples
> 
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$new`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$initialize(domains=..., pheno=..., input_file=..., output_dir=..., number=...)
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$load_data`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$load_data()
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$filter_by_domain`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$filter_by_domain()
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$select_columns`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$select_columns()
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$save_data`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$save_data(filename=..., format=...)
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$has_multiple_raters`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$has_multiple_raters()
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$detect_emotion_type`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$detect_emotion_type()
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$generate_domain_qmd`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$generate_domain_qmd(domain_name=..., output_file=...)
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$generate_standard_qmd`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$generate_standard_qmd(domain_name=..., output_file=...)
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$generate_adhd_adult_qmd`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$generate_adhd_adult_qmd(domain_name=..., output_file=...)
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$generate_adhd_child_qmd`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$generate_adhd_child_qmd(domain_name=..., output_file=...)
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$generate_emotion_child_qmd`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$generate_emotion_child_qmd(domain_name=..., output_file=...)
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$generate_emotion_adult_qmd`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$generate_emotion_adult_qmd(domain_name=..., output_file=...)
> ## End(Not run)
> 
> ## ------------------------------------------------
> ## Method `DomainProcessorR6$process`
> ## ------------------------------------------------
> 
> ## Not run: 
> ##D   obj <- DomainProcessorR6$new()
> ##D   obj$process(generate_domain_files=...)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DomainProcessorR6", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ReportUtilitiesR6")
> ### * ReportUtilitiesR6
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ReportUtilitiesR6
> ### Title: Report Utilities for Neuropsychological Assessment
> ### Aliases: ReportUtilitiesR6
> 
> ### ** Examples
> 
> # Example 1: Basic usage
> # Initialize the utilities class
> report_utils <- ReportUtilitiesR6$new(
+   config = list(
+     output_base_dir = "reports",
+     template_dir = "templates"
+   )
+ )
> 
> # Set up the environment and prepare data
> report_utils$setup_environment()
Created output base directory: reports
Environment setup completed
> report_utils$prepare_data_files("raw_data", "processed_data")
Error in report_utils$prepare_data_files("raw_data", "processed_data") : 
  Input directory does not exist: raw_data
Execution halted
